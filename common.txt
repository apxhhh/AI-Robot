#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "nav_msgs/Odometry.h"
#include <fstream>
#include <time.h>
#include <iomanip>
#include "nav_msgs/Odometry.h"
#include <iostream>
#include <cmath>
#include <chrono>
#include "sensor_msgs/LaserScan.h"

using namespace std::chrono;

using namespace std;

	struct EulerAngles{
		double roll, pitch, yaw;};
	// yaw is what you want, i.e. Th

	struct Quaternion{double w, x, y, z;};

	EulerAngles ToEulerAngles(Quaternion q)
	{
	EulerAngles angles;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
	angles.roll = atan2(sinr_cosp, cosr_cosp);
	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
	if (fabs(sinp) >= 1)
		angles.pitch = copysign(M_PI/2, sinp); //use 90 degrees if out of range
	else
		angles.pitch = asin(sinp);
	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
	angles.yaw = atan2(siny_cosp, cosy_cosp);
	return angles;
	}


class RobotMove { //main class
public:
// Tunable parameters
	constexpr const static double FORWARD_SPEED_LOW = 0.1;
        constexpr const static double FORWARD_SPEED_MIDDLE = 0.3;
        constexpr const static double FORWARD_SPEED_HIGH = 0.5;
        constexpr const static double FORWARD_SPEED_STOP = 0;
        constexpr const static double TURN_LEFT_SPEED_HIGH = 1.0;
        constexpr const static double TURN_LEFT_SPEED_MIDDLE = 0.8;
        constexpr const static double TURN_LEFT_SPEED_LOW = 0.6;
        constexpr const static double TURN_RIGHT_SPEED_HIGH = -1.0;
        constexpr const static double TURN_RIGHT_SPEED_LOW = -0.3;
        constexpr const static double TURN_RIGHT_SPEED_MIDDLE = -0.6;
        constexpr const static double TURN_SPEED_ZERO = 0;
	
RobotMove();
void startMoving();
void moveForward(double forwardSpeed);
void moveStop();
void moveRight(double turn_right_speed = TURN_RIGHT_SPEED_HIGH);
void moveForwardRight(double forwardSpeed, double turn_right_speed);

void odomCallback(const nav_msgs::Odometry::ConstPtr& odomMsg);

void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan);

void transformMapPoint(ofstream& fp, double laserRange, double laserTh);

private:
	ros::NodeHandle node;
	ros::Publisher commandPub; // Publisher to the robot's velocity command topic

	ros::Subscriber odomSub; //Subscriber to robot’s odometry topic

	ros::Subscriber laserSub; // Subscriber to robot’s laser topic

	double PositionX=0.3, PositionY=0.3, landmark1=1.20, landmark2=0.9;
	double homeX = 0.3, homeY = 0.3;

	double landmark3 = 1.2, landmark4 = 1.83, landmark5 = 2.25;
	double robVelocity = 0.00;

	ros::Time current_time;
	ros::Duration real_time;

	double frontRange=0,mleftRange=0,leftRange=0,rightRange=0,mrightRange=0;
	double backRange=0, backleftRange=0, backrightRange=0, laserData[36];
	double frontAngle=0, mleftAngle=M_PI/4, leftAngle=M_PI/2;
	double rightAngle=-M_PI/2, mrightAngle=-M_PI/4;
	double backAngle=M_PI, backleftAngle=3*M_PI/4, backrightAngle=-3*M_PI/4;
	
	Quaternion robotQuat;
	EulerAngles robotAngles;
	double robotHeadAngle;

};

RobotMove::RobotMove(){
//Advertise a new publisher for the simulated robot's velocity command topic at 10Hz
commandPub = node.advertise<geometry_msgs::Twist>("cmd_vel", 10);

// subscribe to the odom topic
odomSub = node.subscribe("odom", 20, &RobotMove::odomCallback, this);

laserSub = node.subscribe("scan", 1, &RobotMove::scanCallback, this);

}
//send a velocity command
void RobotMove::moveForward(double forwardSpeed){
	geometry_msgs::Twist msg;//The default constructor to set all commands to 0
	msg.linear.x = forwardSpeed; //Drive forward at a given speed along the x-axis.
	commandPub.publish(msg);
}
void RobotMove::moveStop(){
	geometry_msgs::Twist msg;
	msg.linear.x = FORWARD_SPEED_STOP;
	commandPub.publish(msg);
}
void RobotMove::moveRight(double turn_right_speed){
	geometry_msgs::Twist msg;
	commandPub.publish(msg);
}

//To add the following function to transform the points to global coordinates.
void RobotMove::transformMapPoint(ofstream& fp, double laserRange, double laserTh){
	double localX, localY, globalX, globalY;
	localX = laserRange * cos(laserTh);
	localY = laserRange * sin(laserTh);
	globalX =(localX*cos(robotHeadAngle)-localY*sin(robotHeadAngle))+ PositionX;
	globalY = (localX*sin(robotHeadAngle)+localY*cos(robotHeadAngle))+ PositionY;
	if (globalX < 0) globalX = 0; else if (globalX > 2.5) globalX = 2.5;
	if (globalY < 0) globalY = 0; else if (globalY > 2.5) globalY = 2.5;
	fp << globalX << " " << globalY << endl;
}

// add the following code
void RobotMove::moveForwardRight(double forwardSpeed, double turn_right_speed){
	//move forward and right at the same time
	geometry_msgs::Twist msg;
	msg.linear.x = forwardSpeed;
	msg.angular.z = turn_right_speed;
	commandPub.publish(msg);
}
// add the callback function to determine the robot position.
void RobotMove::odomCallback(const nav_msgs::Odometry::ConstPtr& odomMsg){
	PositionX = odomMsg->pose.pose.position.x + homeX;
	PositionY = odomMsg->pose.pose.position.y + homeY;
	robVelocity = odomMsg->twist.twist.linear.x;
	robotAngles = ToEulerAngles(robotQuat);
	robotHeadAngle = robotAngles.yaw;
	robotQuat.x = odomMsg->pose.pose.orientation.x;
	robotQuat.y = odomMsg->pose.pose.orientation.y;
	robotQuat.z = odomMsg->pose.pose.orientation.z;
	robotQuat.w = odomMsg->pose.pose.orientation.w;
}

void RobotMove::scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan){
	// collect 36 laser readings every 360 degrees scan
	for(int i=0; i<36; i++) // to get 36 laser readings over 360 degrees
		laserData[i] = scan->ranges[i*10]; // to get laser readings every 10 degrees
	
	// the following code for the control purpose
	frontRange = scan->ranges[0]; // get the range reading at 0 radians
	mleftRange = scan->ranges[89]; // get the range reading at -π/4 radians
	leftRange = scan->ranges[179]; // get the range reading at -π/2 radians
	rightRange = scan->ranges[539]; // get the range reading at π/2 radians
	mrightRange = scan->ranges[629]; // get the range reading at π/4 radians
	backRange = scan->ranges[359]; // get the range reading at π radians
	backleftRange = scan->ranges[269]; // get the range reading at π/2 radians
	backrightRange = scan->ranges[449]; // get the range reading at π/4 radians
   }

	ofstream openFile(const string& name){ // open files for data storage
	string homedir = getenv("HOME");
	ostringstream path;
	path << homedir << "/ros_workspace/src/tutorial_pkg/" << name;
	return ofstream(path.str());
};

// add the following function
void RobotMove::startMoving(){

	ofstream odomVelFile = openFile("odomVelData.csv");
	auto currentTime = high_resolution_clock::now();
	auto startTime = currentTime;


	int stage = 1;

	ofstream odomTrajFile = openFile("odomTrajData.csv");
	ofstream laserFile = openFile("laserData.csv");
	ofstream laserMapFile = openFile("laserMapData.csv");

	ros::Rate rate(20); //Define rate for repeatable operations.
	ROS_INFO("Start moving");

	while (ros::ok()){ // keep spinning loop until user presses Ctrl+C
		switch(stage){
		case 1: // the robot move forward from home
		if (PositionY < landmark1)
		moveForward(FORWARD_SPEED_HIGH);
		else stage = 2;
		break;
		case 2: // the robot turns right toward the 1st gap
		if (PositionX < landmark2)
		moveForwardRight( FORWARD_SPEED_MIDDLE, TURN_RIGHT_SPEED_MIDDLE);
		else stage = 3;
		break;

		case 3: // the robot moves forward fast
		if (PositionX < landmark3)
		moveForward(FORWARD_SPEED_HIGH);
		else stage = 4;
		break;

		case 4: // the robot moves and turns right slowly
		if (PositionX < landmark4)
		moveForwardRight (FORWARD_SPEED_MIDDLE,-0.56);
		else stage = 5;
		break;

		case 5: // the robot moves towards the charger
		if (PositionX < landmark5)
		moveForward(FORWARD_SPEED_HIGH);
		else stage = 6;
		break;

		case 6: // the robot stops at the middle of the 1st gap
		moveStop();
		break;
		}

	auto currentTime = high_resolution_clock::now();
	duration<double,std::deca> runTime = currentTime  - startTime;
	runTime = runTime * 10;             // convert time to seconds
	odomVelFile << ceil(runTime.count()) << " " << robVelocity << endl;

	odomTrajFile << PositionX << " " << PositionY << endl;

	ros::spinOnce(); // Allow ROS to process incoming messages
	rate.sleep(); // Wait until defined time passes.


	for(int i=0; i<36; i++) // save laser data for view and check
		laserFile << i << " " << laserData[i];
	laserFile << endl;

	transformMapPoint(laserMapFile, frontRange, frontAngle);
	transformMapPoint(laserMapFile, leftRange, leftAngle);
	transformMapPoint(laserMapFile, rightRange, rightAngle);
	transformMapPoint(laserMapFile, mleftRange, mleftAngle);
	transformMapPoint(laserMapFile, mrightRange, mrightAngle);

	ros::spinOnce();
	rate.sleep();
	}

	odomTrajFile.close();
	odomVelFile.close();
	laserFile.close();
	laserMapFile.close();

}

int main(int argc, char **argv) {
ros::init(argc, argv, "RobotMove");//Initiate new ROS node named "RobotMove"
RobotMove RobotMove; // Create new RobotMove object
RobotMove.startMoving(); // Start the movement
return 0;
}